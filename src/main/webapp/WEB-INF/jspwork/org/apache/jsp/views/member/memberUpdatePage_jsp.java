/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.78
 * Generated at: 2023-08-16 08:05:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import member.model.vo.Member;

public final class memberUpdatePage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("member.model.vo.Member");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

    Member member = (Member)request.getAttribute("member");

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>first</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("table th {\r\n");
      out.write("	background-color: #9ff;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("table#outer {\r\n");
      out.write("	border: 2px solid navy;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1 align=\"center\">회원 정보 수정 페이지</h1>\r\n");
      out.write("	<br>\r\n");
      out.write("	<form action=\"/first/mupdate\" method=\"post\">\r\n");
      out.write("<table id=\"outer\" align=\"center\" width=\"500\" cellsapcing=\"5\" cellpadding=\"0\">\r\n");
      out.write("   <tr><th colspan=\"2\">등록된 회원정보는 아래와 같습니다. <br> \r\n");
      out.write("               수정할 내용이 있으면 변경하고 수정하기 버튼을 누르세요. </th></tr>\r\n");
      out.write("   <tr><th width=\"120\">아이디</th>\r\n");
      out.write("      <td> <input type=\"text\" name=\"userid\" value=\"");
      out.print( member.getUserId() );
      out.write("\" readonly> &nbsp;\r\n");
      out.write("      <input type=\"button\" value=\"중복확인\" onclick=\"return dupIDCheck();\"></td></tr>\r\n");
      out.write("   \r\n");
      out.write("   <tr><th>이름</th>\r\n");
      out.write("      <td><input type=\"text\" name=\"username\"  value=\"");
      out.print( member.getUserName() );
      out.write("\" readonly></td></tr>\r\n");
      out.write("   <tr>\r\n");
      out.write("				<th>성별</th>\r\n");
      out.write("				<td>\r\n");
      out.write("					");
 if(member.getGender().equals("M")){
      out.write(" <input type=\"radio\"\r\n");
      out.write("					name=\"gender\" value=\"M\" checked>남자 &nbsp; <input\r\n");
      out.write("					type=\"radio\" name=\"gender\" value=\"F\">여자 &nbsp; <input\r\n");
      out.write("					type=\"radio\" name=\"gender\" value=\"T\">제3의성 &nbsp; ");
}else if(member.getGender().equals("F")){
      out.write("\r\n");
      out.write("					<input type=\"radio\" name=\"gender\" value=\"M\">남자 &nbsp; <input\r\n");
      out.write("					type=\"radio\" name=\"gender\" value=\"F\" checked>여자 &nbsp; <input\r\n");
      out.write("					type=\"radio\" name=\"gender\" value=\"T\">제3의성 &nbsp; ");
}else{
      out.write(" <input\r\n");
      out.write("					type=\"radio\" name=\"gender\" value=\"M\">남자 &nbsp; <input\r\n");
      out.write("					type=\"radio\" name=\"gender\" value=\"F\">여자 &nbsp; <input\r\n");
      out.write("					type=\"radio\" name=\"gender\" value=\"T\" checked>제3의성 &nbsp; ");
}
      out.write("\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("      \r\n");
      out.write("   <tr><th>나이</th>\r\n");
      out.write("      <td> <input type=\"number\" name=\"age\" min=\"19\" value=\"");
      out.print( member.getAge() );
      out.write("\"></tr>\r\n");
      out.write("   <tr><th>전화번호</th>\r\n");
      out.write("      <td> <input type=\"tel\" name=\"phone\" value=\"");
      out.print( member.getPhone() );
      out.write("\"></td></tr>\r\n");
      out.write("   <tr><th>이메일</th>\r\n");
      out.write("      <td> <input type=\"email\" name=\"email\" value=\"");
      out.print( member.getEmail() );
      out.write("\"></td></tr>\r\n");
      out.write("   <tr><th>취미(연습용)</th>\r\n");
      out.write("   ");

      //예를 들어, hobby로 응답 온 값이 "game,sport,cook"인 경우
      String hobby = "game,sport,cook";
   
      //하나의 문장을 ","로 각각 분리 처리
      String[] hobbies = hobby.split(",");
      
      //checkbox의 checked 속성 설정을 위한 배열을 만듦 : checkbox 갯수만큼
      String[] checked = new String[9];
      
      for(String hb : hobbies){
         switch(hb){
         case "game": checked[0] = "checked"; break;
         case "reading": checked[1] = "checked"; break;
         case "climb": checked[2] = "checked"; break;
         case "sport": checked[3] = "checked"; break;
         case "music": checked[4] = "checked"; break;
         case "movie": checked[5] = "checked"; break;
         case "travle": checked[6] = "checked"; break;
         case "cook": checked[7] = "checked"; break;
         case "etc": checked[8] = "checked"; break;
         
         }
      }
      
   
      out.write("\r\n");
      out.write("      <td> <table width=\"350\">\r\n");
      out.write("         <tr> \r\n");
      out.write("            <td> <input type=\"checkbox\" name=\"hobby\" value=\"간\" ");
      out.print( checked[0] );
      out.write("> 간</td>\r\n");
      out.write("            <td> <input type=\"checkbox\" name=\"hobby\" value=\"신장\" ");
      out.print( checked[1] );
      out.write("> 신장</td>\r\n");
      out.write("            <td> <input type=\"checkbox\" name=\"hobby\" value=\"폐\" ");
      out.print( checked[2] );
      out.write("> 폐</td>\r\n");
      out.write("         </tr>\r\n");
      out.write("         <tr> \r\n");
      out.write("            <td> <input type=\"checkbox\" name=\"hobby\" value=\"각막\" ");
      out.print( checked[3] );
      out.write("> 각막</td>\r\n");
      out.write("            <td> <input type=\"checkbox\" name=\"hobby\" value=\"심장\" ");
      out.print( checked[4] );
      out.write("> 심장</td>\r\n");
      out.write("            <td> <input type=\"checkbox\" name=\"hobby\" value=\"소장\" ");
      out.print( checked[5] );
      out.write("> 소장</td>\r\n");
      out.write("         </tr>\r\n");
      out.write("         <tr> \r\n");
      out.write("            <td> <input type=\"checkbox\" name=\"hobby\" value=\"심장동맥\" ");
      out.print( checked[6] );
      out.write("> 심장동맥</td>\r\n");
      out.write("            <td> <input type=\"checkbox\" name=\"hobby\" value=\"쓸개\" ");
      out.print( checked[7] );
      out.write("> 쓸개</td>\r\n");
      out.write("            <td> <input type=\"checkbox\" name=\"hobby\" value=\"혈액\" ");
      out.print( checked[8] );
      out.write(">혈액</td>\r\n");
      out.write("         </tr>\r\n");
      out.write("         \r\n");
      out.write("      </table>\r\n");
      out.write("   </td></tr>\r\n");
      out.write("   <tr><th>기타 정보(연습용)</th>\r\n");
      out.write("      <td> <textarea name=\"etc\" cols=\"50\" rows=\"3\"></textarea></td></tr>\r\n");
      out.write("   <tr><th colspan=\"2\">\r\n");
      out.write("      <input type=\"submit\" value=\"수정하기\">&nbsp;\r\n");
      out.write("      <a href=\"/first/mdel?userid=");
      out.print( member.getUserId() );
      out.write("\">탈퇴하기</a>\r\n");
      out.write("      <a href=\"javascript:history.go(-1);\">이전 페이지로 이동</a>&nbsp;\r\n");
      out.write("      <a href=\"/first/index.jsp\">시작페이지로 이동</a>\r\n");
      out.write("   </th></tr>\r\n");
      out.write("\r\n");
      out.write("</table>\r\n");
      out.write("</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
